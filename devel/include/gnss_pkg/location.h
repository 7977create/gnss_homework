// Generated by gencpp from file gnss_pkg/location.msg
// DO NOT EDIT!


#ifndef GNSS_PKG_MESSAGE_LOCATION_H
#define GNSS_PKG_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gnss_pkg
{
template <class ContainerAllocator>
struct location_
{
  typedef location_<ContainerAllocator> Type;

  location_()
    : header()
    , pitch(0.0)
    , roll(0.0)
    , heading(0.0)
    , longtitude(0.0)
    , latitude(0.0)
    , altitude(0.0)
    , speed2d(0.0)
    , Ve(0.0)
    , Vn(0.0)
    , Vu(0.0)
    , GPStime(0.0)
    , pose_type(0)
    , INS_Status(0)
    , Lat_vart(0.0)
    , Lon_vart(0.0)  {
    }
  location_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pitch(0.0)
    , roll(0.0)
    , heading(0.0)
    , longtitude(0.0)
    , latitude(0.0)
    , altitude(0.0)
    , speed2d(0.0)
    , Ve(0.0)
    , Vn(0.0)
    , Vu(0.0)
    , GPStime(0.0)
    , pose_type(0)
    , INS_Status(0)
    , Lat_vart(0.0)
    , Lon_vart(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _heading_type;
  _heading_type heading;

   typedef double _longtitude_type;
  _longtitude_type longtitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef float _speed2d_type;
  _speed2d_type speed2d;

   typedef double _Ve_type;
  _Ve_type Ve;

   typedef double _Vn_type;
  _Vn_type Vn;

   typedef double _Vu_type;
  _Vu_type Vu;

   typedef double _GPStime_type;
  _GPStime_type GPStime;

   typedef int32_t _pose_type_type;
  _pose_type_type pose_type;

   typedef int32_t _INS_Status_type;
  _INS_Status_type INS_Status;

   typedef float _Lat_vart_type;
  _Lat_vart_type Lat_vart;

   typedef float _Lon_vart_type;
  _Lon_vart_type Lon_vart;





  typedef boost::shared_ptr< ::gnss_pkg::location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_pkg::location_<ContainerAllocator> const> ConstPtr;

}; // struct location_

typedef ::gnss_pkg::location_<std::allocator<void> > location;

typedef boost::shared_ptr< ::gnss_pkg::location > locationPtr;
typedef boost::shared_ptr< ::gnss_pkg::location const> locationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_pkg::location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_pkg::location_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_pkg::location_<ContainerAllocator1> & lhs, const ::gnss_pkg::location_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.heading == rhs.heading &&
    lhs.longtitude == rhs.longtitude &&
    lhs.latitude == rhs.latitude &&
    lhs.altitude == rhs.altitude &&
    lhs.speed2d == rhs.speed2d &&
    lhs.Ve == rhs.Ve &&
    lhs.Vn == rhs.Vn &&
    lhs.Vu == rhs.Vu &&
    lhs.GPStime == rhs.GPStime &&
    lhs.pose_type == rhs.pose_type &&
    lhs.INS_Status == rhs.INS_Status &&
    lhs.Lat_vart == rhs.Lat_vart &&
    lhs.Lon_vart == rhs.Lon_vart;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_pkg::location_<ContainerAllocator1> & lhs, const ::gnss_pkg::location_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gnss_pkg::location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_pkg::location_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_pkg::location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_pkg::location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_pkg::location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_pkg::location_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_pkg::location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d10dd53c2060c0966a0cb0e0c08fa213";
  }

  static const char* value(const ::gnss_pkg::location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd10dd53c2060c096ULL;
  static const uint64_t static_value2 = 0x6a0cb0e0c08fa213ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_pkg::location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_pkg/location";
  }

  static const char* value(const ::gnss_pkg::location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_pkg::location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32     pitch         #俯仰角\n"
"float32     roll            #翻滚角\n"
"float32     heading     #航向角\n"
"\n"
"float64     longtitude  #经度\n"
"float64     latitude      #纬度\n"
"float64     altitude      #海拔\n"
"\n"
"float32     speed2d     #车辆速度\n"
"#-------------------------------->\n"
"float64     Ve               #向东速度\n"
"float64     Vn               #向北速度\n"
"float64     Vu               #天向速度\n"
"#<-------------------------------\n"
"float64    GPStime      #时间\n"
"int32       pose_type   #定位状态\n"
"int32       INS_Status  #解算状态\n"
"float32    Lat_vart      #纬度标准差\n"
"float32    Lon_vart     #经度标准差\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::gnss_pkg::location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_pkg::location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.heading);
      stream.next(m.longtitude);
      stream.next(m.latitude);
      stream.next(m.altitude);
      stream.next(m.speed2d);
      stream.next(m.Ve);
      stream.next(m.Vn);
      stream.next(m.Vu);
      stream.next(m.GPStime);
      stream.next(m.pose_type);
      stream.next(m.INS_Status);
      stream.next(m.Lat_vart);
      stream.next(m.Lon_vart);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_pkg::location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_pkg::location_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "longtitude: ";
    Printer<double>::stream(s, indent + "  ", v.longtitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "speed2d: ";
    Printer<float>::stream(s, indent + "  ", v.speed2d);
    s << indent << "Ve: ";
    Printer<double>::stream(s, indent + "  ", v.Ve);
    s << indent << "Vn: ";
    Printer<double>::stream(s, indent + "  ", v.Vn);
    s << indent << "Vu: ";
    Printer<double>::stream(s, indent + "  ", v.Vu);
    s << indent << "GPStime: ";
    Printer<double>::stream(s, indent + "  ", v.GPStime);
    s << indent << "pose_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pose_type);
    s << indent << "INS_Status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.INS_Status);
    s << indent << "Lat_vart: ";
    Printer<float>::stream(s, indent + "  ", v.Lat_vart);
    s << indent << "Lon_vart: ";
    Printer<float>::stream(s, indent + "  ", v.Lon_vart);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_PKG_MESSAGE_LOCATION_H
