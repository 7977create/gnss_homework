// Generated by gencpp from file gnss_pkg/LaneLineArray.msg
// DO NOT EDIT!


#ifndef GNSS_PKG_MESSAGE_LANELINEARRAY_H
#define GNSS_PKG_MESSAGE_LANELINEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gnss_pkg/LaneLine.h>

namespace gnss_pkg
{
template <class ContainerAllocator>
struct LaneLineArray_
{
  typedef LaneLineArray_<ContainerAllocator> Type;

  LaneLineArray_()
    : lines()  {
    }
  LaneLineArray_(const ContainerAllocator& _alloc)
    : lines(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::gnss_pkg::LaneLine_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::gnss_pkg::LaneLine_<ContainerAllocator> >> _lines_type;
  _lines_type lines;





  typedef boost::shared_ptr< ::gnss_pkg::LaneLineArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_pkg::LaneLineArray_<ContainerAllocator> const> ConstPtr;

}; // struct LaneLineArray_

typedef ::gnss_pkg::LaneLineArray_<std::allocator<void> > LaneLineArray;

typedef boost::shared_ptr< ::gnss_pkg::LaneLineArray > LaneLineArrayPtr;
typedef boost::shared_ptr< ::gnss_pkg::LaneLineArray const> LaneLineArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_pkg::LaneLineArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gnss_pkg::LaneLineArray_<ContainerAllocator1> & lhs, const ::gnss_pkg::LaneLineArray_<ContainerAllocator2> & rhs)
{
  return lhs.lines == rhs.lines;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gnss_pkg::LaneLineArray_<ContainerAllocator1> & lhs, const ::gnss_pkg::LaneLineArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gnss_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_pkg::LaneLineArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_pkg::LaneLineArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_pkg::LaneLineArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b311b16e049dce662db6f00b38186809";
  }

  static const char* value(const ::gnss_pkg::LaneLineArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb311b16e049dce66ULL;
  static const uint64_t static_value2 = 0x2db6f00b38186809ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_pkg/LaneLineArray";
  }

  static const char* value(const ::gnss_pkg::LaneLineArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#------------------------------\n"
"#车道线序列\n"
"#------当前项目中车道线点序列长度为30\n"
"#------------------------------\n"
"\n"
"LaneLine[]         lines\n"
"\n"
"================================================================================\n"
"MSG: gnss_pkg/LaneLine\n"
"\n"
"#------------------------------\n"
"#车道线\n"
"#------当前项目中车道线点序列长度为30\n"
"#------geometry_msgs/Point类型是（x,y,z),目前只填充x,y忽略z\n"
"#------s可以用来计算点位于地图的frenet的s坐标值\n"
"#------------------------------\n"
"uint32                         id\n"
"uint8                          type\n"
"float64[]                      x\n"
"float64[]                      y\n"
"float64[]                      s\n"
"\n"
"geometry_msgs/Point[]          points\n"
"uint8                          current_lane_num\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::gnss_pkg::LaneLineArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneLineArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_pkg::LaneLineArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_pkg::LaneLineArray_<ContainerAllocator>& v)
  {
    s << indent << "lines[]" << std::endl;
    for (size_t i = 0; i < v.lines.size(); ++i)
    {
      s << indent << "  lines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gnss_pkg::LaneLine_<ContainerAllocator> >::stream(s, indent + "    ", v.lines[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_PKG_MESSAGE_LANELINEARRAY_H
